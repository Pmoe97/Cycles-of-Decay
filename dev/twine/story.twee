:: StoryTitle
Cycles of Decay

:: StoryData
{
	"ifid": "e72e94c5-ed7f-46e7-9f09-5eb474ec4090",
	"format": "SugarCube",
	"format-version": "2.37.3",
	"start": "Start",
	"tagColors": {}
}

:: StorySettings
{"debug": true}

:: StoryCaption
<i>Cycles of Decay</i> — A Twine/SugarCube interactive fiction project scaffold.

:: StoryAuthor
Your Name Here

:: StorySubtitle
A World In Slow Collapse

:: StoryBanner
<img src="assets/images/banner.png" alt="Cycles of Decay" />

:: StoryStylesheet[stylesheet]
/* Inline stylesheet (optional). Core styles live in dev/styles/*.css */
/* Example variable overrides */
:root {
	--cod-accent: #8fd1ff;
}

:: StoryScript[script]
/* Inline JavaScript (optional). Core scripts live in dev/js/*.js */
/* Example: simple version log */
console.log('StoryScript loaded: Cycles of Decay');

:: StoryInit
/* Runs once at story start (after StoryScript). */
<<run
// Initialize small game metadata
setup.game = { title: 'Cycles of Decay', version: '0.0.1', initialized: true };
// Initialize new procedural world if required
if (State.variables._needsInit || !State.variables.legacy) {
  setup.initNewGame();
}
// Convenience reference
State.variables.player = State.variables.pc; // legacy code compatibility

// ===== NPC debug helpers =====
// Return array of NPC IDs in display order
setup.npcIds = function() {
  const v = State.variables;
  if (v.populationOrder && v.populationOrder.length) { return v.populationOrder.slice(); }
  return Object.keys(v.actors || {}).sort();
};
// Get an NPC by id safely
setup.getNPC = function(id) { return (State.variables.actors && State.variables.actors[id]) || null; };
// Basic predicate filter for list search
setup.filterNpc = function(npc, q) {
  if (!q) return true;
  q = String(q).toLowerCase();
  const name = (npc.identity && npc.identity.fullName) ? npc.identity.fullName : '';
  const occ  = (npc.background && npc.background.occupation) ? npc.background.occupation : '';
  return (
    (npc.id || '').toLowerCase().includes(q) ||
    name.toLowerCase().includes(q) ||
    occ.toLowerCase().includes(q)
  );
};

// Example: deterministic 200 NPCs for debug view
if (setup.NPC && typeof setup.NPC.reseed === 'function') {
  setup.NPC.reseed('TownSeed:Alpha');
}
if (!State.variables.actors) State.variables.actors = {};
if (!State.variables.populationOrder) State.variables.populationOrder = [];
if (setup.NPC && typeof setup.NPC.generatePopulation === 'function') {
  (function(){
    const pop = setup.NPC.generatePopulation(200);
    for (const npc of pop) {
      State.variables.actors[npc.id] = npc;
      State.variables.populationOrder.push(npc.id);
    }
  })();
}

// Pretty recursive renderer => HTML (collapsible <details>)
setup.renderObject = function(obj, keyName) {
  const esc = (s) => String(s).replace(/[&<>\"]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;'}[c]));
  function render(o, k) {
    if (o === null || o === undefined) return '<span class="v-null">null</span>';
    const t = typeof o;
    if (t === 'string') return '<span class="v-str">"' + esc(o) + '"</span>';
    if (t === 'number') return '<span class="v-num">' + o + '</span>';
    if (t === 'boolean') return '<span class="v-bool">' + o + '</span>';
    if (Array.isArray(o)) {
      if (o.length === 0) return '<span class="v-arr">[]</span>';
      return '<details open><summary class="k">' + esc(k) + ' [' + o.length + ']</summary><ul>' +
        o.map(function(v,i){ return '<li>' + render(v, String(i)) + '</li>'; }).join('') +
      '</ul></details>';
    }
    const keys = Object.keys(o);
    if (keys.length === 0) return '<span class="v-null">{}</span>';
    const inner = keys.map(function(sub){ return '<li><span class="k">' + esc(sub) + ':</span> ' + render(o[sub], sub) + '</li>'; }).join('');
    if (k === undefined) return '<ul class="obj">' + inner + '</ul>';
    return '<details open><summary class="k">' + esc(k) + '</summary><ul>' + inner + '</ul></details>';
  }
  return '<div class="obj">' + render(obj, keyName) + '</div>';
};
// Convenience for copying JSON to a textarea
setup.toJSONString = function(o) { try { return JSON.stringify(o, null, 2); } catch(e){ return '/* JSON stringify error */'; } };
>>


:: StoryMenu
/* Customize the menu (appears via the sidebar). */
<<link 'Restart'>><<restart>><</link>> | <<link 'Save'>><<save>><</link>> | <<link 'Load'>><<load>><</link>>

:: Start
<<if !$startBannerShown>>
  <<set $startBannerShown = true>>
  <div class="seed-note">World Seed: <span title="Use the ?seed= query parameter to reproduce a world">$legacy.seed</span></div>
<</if>>
You stand amidst ruins, the wind carrying whispers of forgotten cycles.

Current Life: <b><<=$pc.identity?.fullName||'Unknown'>></b> (<i><<=$pc.background?.occupation||$pc.personality?.archetype||'n/a'>></i>) — Traits: <<= ($pc.personality?.traits||[]).join(', ') >>
<br/>Health: <<= $pc.conditions?.vitals?.hp || 0 >> / <<= $pc.derived?.hpMax || 0 >> | Awareness: <<= $pc.derived?.perception || 0 >> | Will: <<= $pc.attributes?.FOR || 0 >>
<br/>Population: $legacy.populationRoster.length remaining.

[[Continue|Intro]]
[[NPC Debug|NPC Debug]]

<<link "Start Fresh World" >><<newgame>><</link>> (procedurally regenerate all inhabitants)

:: Intro
This is a placeholder passage. Add your narrative here.

[[Back to Start|Start]]
